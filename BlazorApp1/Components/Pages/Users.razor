@page "/users"
@using System.Drawing.Printing
@using BlazorApp1.Entities
@using BlazorApp1.Logic
@using BlazorApp1.Components.Pages.Templates
@using BlazorApp1.Entities.Dto
@inject UserLogic UserLogic
@rendermode InteractiveServer

<h3>Users List</h3>

@if (users == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <TableTemplate 
        InputItem="UserViewDto"
        InputItems="users"
        OnDelete="@DeleteUser"
        OnEdit="@EditUser"
        EnableActions="true"/>
    
    
    <h3>Create New User</h3>
    <EditForm Model="@newUser" OnValidSubmit="HandleCreateUser">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="name">Name</label>
            <InputText id="name" class="form-control" @bind-Value="newUser.Name" />
            <ValidationMessage For="@(() => newUser.Name)" />
        </div>

        <button type="submit" class="btn btn-success mt-2">Create</button>
    </EditForm>
    
    @if (isEditMode)
    {
        <h3>Edit User</h3>
        <EditForm Model="@editUser" OnValidSubmit="HandleEditUser">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="editName">Name</label>
                <InputText id="editName" class="form-control" @bind-Value="editUser.Name" />
                <ValidationMessage For="@(() => editUser.Name)" />
            </div>

            <button type="submit" class="btn btn-primary mt-2">Save Changes</button>
            <button type="button" class="btn btn-secondary mt-2" @onclick="CancelEdit">Cancel</button>
        </EditForm>
    }


}


@code {
    private List<UserViewDto> users;
    private UserCreateDto newUser = new UserCreateDto();
    private bool isEditMode = false;
    private UserUpdateDto editUser;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsersAsync();
    }

    private async Task LoadUsersAsync()
    {

    }

    private async Task DeleteUser(int id)
    {
        // Log to console when the button is clicked
        Console.WriteLine($"Delete button clicked for user with Id: {id}");

        var success = await UserLogic.DeleteUserAsync(id);
        if (success)
        {
            await LoadUsersAsync();
            StateHasChanged(); // Refresh the UI to reflect changes
        }
    }

    private async Task HandleCreateUser()
    {
        // Log to console when the form is submitted
        Console.WriteLine($"Creating user: {newUser.Name}");

        var success = UserLogic.CreateUserAsync(newUser);
        if (success.Result==true)
        {
            await LoadUsersAsync();
            newUser = new UserCreateDto(); // Reset the form
        }
    }

    private void EditUser(int userId)
    {
        var curitem = users.Where(x=> x.Id == userId).ToList().FirstOrDefault();
        // Pre-fill the form with the user's current data
        editUser = new UserUpdateDto { Id = curitem.Id, Name = curitem.Name };
        isEditMode = true;
    }

    private async Task HandleEditUser()
    {
        // Log to console when the form is submitted
        Console.WriteLine($"Editing user: {editUser.Name}");

        var success = await UserLogic.UpdateUserAsync(editUser);
        if (success)
        {
            await LoadUsersAsync();
            isEditMode = false; // Exit edit mode
            StateHasChanged();
        }
    }

    private void CancelEdit()
    {
        // Cancel editing and return to the list
        isEditMode = false;
    }
}