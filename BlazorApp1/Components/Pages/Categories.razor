@page "/Categories"
@using System.Drawing.Printing
@using BlazorApp1.Entities
@using BlazorApp1.Entities.Dto
@using BlazorApp1.Logic
@using BlazorApp1.Components.Pages.Templates
@using BlazorApp1.Components.Pages.Templates
@rendermode InteractiveServer

<h3>Categories List</h3>

@if (categories == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <TableTemplate 
        InputItem="CategoryViewDto"
        InputItems="categories"
                   OnDelete="@DeleteItem"
                   OnEdit="@EditItem"
                   EnableActions="true"/>

    
        
    <h3>Create New Category</h3>
    <EditForm Model="@newCategory" OnValidSubmit="CreateCategory">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="name">Name</label>
            <InputText id="name" class="form-control" @bind-Value="newCategory.Name" />
            <ValidationMessage For="@(() => newCategory.Name)" />
        </div>

        <button type="submit" class="btn btn-success mt-2">Create</button>
    </EditForm>
    
    @if (isEditMode)
    {
        <h3>Edit User</h3>
        <EditForm Model="@editCategory" OnValidSubmit="HandleEditItem">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="editName">Name</label>
                <InputText id="editName" class="form-control" @bind-Value="editCategory.Name" />
                <ValidationMessage For="@(() => editCategory.Name)" />
            </div>

            <button type="submit" class="btn btn-primary mt-2">Save Changes</button>
            <button type="button" class="btn btn-secondary mt-2" @onclick="CancelEdit">Cancel</button>
        </EditForm>
    }


}

@inject IHttpClientFactory HttpClientFactory
@code {
    private HttpClient Http;
    

    private List<CategoryViewDto> categories;
    private CategoryCreateDto newCategory = new CategoryCreateDto();
    private bool isEditMode = false;
    private CategoryUpdateDto editCategory;

    protected override async Task OnInitializedAsync()
    {
        Http = HttpClientFactory.CreateClient("MyAPI");
        await LoadItemsAsync();
    }

    private async Task LoadItemsAsync()
    {
        categories = await Http.GetFromJsonAsync<List<CategoryViewDto>>("Category");

     //   categories = CategoryLogic.GetAllItems().ToList();
    }

    private async Task DeleteItem(int id)
    {
        Console.WriteLine($"Delete button clicked for category with Id: {id}");

        var response = await Http.DeleteAsync($"Category/Delete?id={id}");
        if (response.IsSuccessStatusCode)
        {
            await LoadItemsAsync();
            StateHasChanged();
        }
    }
    
    private async Task CreateCategory()
    {
        Console.WriteLine($"Creating category: {newCategory.Name}");

        var response = await Http.PostAsJsonAsync("Category/Create", newCategory);
        if (response.IsSuccessStatusCode)
        {
            await LoadItemsAsync();
            newCategory = new CategoryCreateDto(); // Reset form
        }
        else
        {
            Console.WriteLine("Failed to create category.");
        }
    }

    private async Task EditItem(int itemId)
    {
        var curItem = categories.FirstOrDefault(x => x.Id == itemId);
        if (curItem != null)
        {
            editCategory = new CategoryUpdateDto
            {
                Id = curItem.Id,
                Name = curItem.Name
            };
            isEditMode = true;
        }
    }


    private async Task HandleEditItem()
    {
        Console.WriteLine($"Editing category: {editCategory.Name}");

        var response = await Http.PutAsJsonAsync("Category/Edit", editCategory);
        if (response.IsSuccessStatusCode)
        {
            await LoadItemsAsync();
            isEditMode = false;
            StateHasChanged();
        }
        else
        {
            Console.WriteLine("Failed to update category.");
        }
    }



    private void CancelEdit()
    {
        // Cancel editing and return to the list
        isEditMode = false;
    }
}