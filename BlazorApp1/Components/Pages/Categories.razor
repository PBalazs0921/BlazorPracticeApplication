@page "/Categories"
@using System.Drawing.Printing
@using BlazorApp1.Entities
@using BlazorApp1.Entities.Dto
@using BlazorApp1.Logic
@using BlazorApp1.Components.Pages.Templates
@using BlazorApp1.Components.Pages.Templates
@inject CategoryLogic CategoryLogic
@rendermode InteractiveServer

<h3>Categories List</h3>

@if (categories == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <TableTemplate 
        InputItem="CategoryViewDto"
        InputItems="categories"
                   OnDelete="@DeleteItem"
                   OnEdit="@EditItem"
                   EnableActions="true"/>

    
        
    <h3>Create New Category</h3>
    <EditForm Model="@newCategory" OnValidSubmit="CreateCategory">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="name">Name</label>
            <InputText id="name" class="form-control" @bind-Value="newCategory.Name" />
            <ValidationMessage For="@(() => newCategory.Name)" />
        </div>

        <button type="submit" class="btn btn-success mt-2">Create</button>
    </EditForm>
    
    @if (isEditMode)
    {
        <h3>Edit User</h3>
        <EditForm Model="@editCategory" OnValidSubmit="HandleEditUser">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="editName">Name</label>
                <InputText id="editName" class="form-control" @bind-Value="editCategory.Name" />
                <ValidationMessage For="@(() => editCategory.Name)" />
            </div>

            <button type="submit" class="btn btn-primary mt-2">Save Changes</button>
            <button type="button" class="btn btn-secondary mt-2" @onclick="CancelEdit">Cancel</button>
        </EditForm>
    }


}


@code {
    private List<CategoryViewDto> categories;
    private CategoryCreateDto newCategory = new CategoryCreateDto();
    private bool isEditMode = false;
    private CategoryUpdateDto editCategory;

    protected override async Task OnInitializedAsync()
    {
        await LoadItemsAsync();
    }

    private async Task LoadItemsAsync()
    {
        categories = CategoryLogic.GetAllItems().ToList();
    }

    private async Task DeleteItem(int id)
    {
        // Log to console when the button is clicked
        Console.WriteLine($"Delete button clicked for user with Id: {id}");

        var success = CategoryLogic.DeleteCategory(id);
        if (success)
        {
            await LoadItemsAsync();
            StateHasChanged(); // Refresh the UI to reflect changes
        }
    }
    
    private async Task EditItem(int itemid)
    {
        var curitem = categories.Where(x=> x.Id == itemid).ToList().FirstOrDefault();
        // Pre-fill the form with the user's current data
        editCategory = new CategoryUpdateDto { Id = curitem.Id, Name = curitem.Name };
        isEditMode = true;
    }


    private async Task CreateCategory()
    {
        // Log to console when the form is submitted
        Console.WriteLine($"Creating user: {editCategory.Name}");

        var success = CategoryLogic.CreateItem(newCategory);
        if (success)
        {
            await LoadItemsAsync();
            newCategory = new CategoryCreateDto(); // Reset the form
        }
    }

    private async Task HandleEditUser()
    {
        // Log to console when the form is submitted
        Console.WriteLine($"Editing user: {editCategory.Name}");

        var success = CategoryLogic.UpdateItem(editCategory);
        if (success)
        {
            await LoadItemsAsync();
            isEditMode = false; // Exit edit mode
            StateHasChanged();
        }
    }

    private void CancelEdit()
    {
        // Cancel editing and return to the list
        isEditMode = false;
    }
}